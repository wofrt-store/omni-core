#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "daima_daima"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"
x-loggingLevel: info

#
# Describe what the target network is/does.
#
description: "The network to be in if you want to stay in the global trade business"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org2

  logging:
    level: error


  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 10s
      queryResponse: 20s
      executeTxResponse: 30s
  eventService:
    timeout:
      connection: 10s
      registrationResponse: 20s
  orderer:
    timeout:
      connection: 10s
      response: 30s

  # Needed to load users crypto keys and certs.
  cryptoconfig:
    path: /root/omni/crypotogens

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Not used by Go SDK. Others SDKs may use it if using an alternative impl
    # Could be used if SDK would require an object for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

    # [Optional]. Specific to Composer environment. Not used by SDK Go.
    wallet: wallet-name

   # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: false
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: false
     ephemeral: false
     level: 256

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  ctk-main:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - order.order1.omnicash-pay.com
    peers:
      peer0.org2.omnicash-pay.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
    chaincodes:
      # the format follows the "canonical name" of chaincodes by fabric code
      - mycc:1.1

#
# list of participating organizations in this network
#
organizations:
  Org2:
    mspid: Org2MSP
    cryptoPath:  peerOrganizations/org2.omnicash-pay.com/users/User1@org2.omnicash-pay.com/msp
    peers:
      - peer0.org2.omnicash-pay.com
  Order1:
      mspID: "Order1MSP"
 #
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  order.order1.omnicash-pay.com:
    url: grpcs://order.order1.omnicash-pay.com:7050
    grpcOptions:
      ssl-target-name-override: order.order1.omnicash-pay.com
      grpc-max-send-message-length: 15
    tlsCACerts:
      path: /root/daima/crypotogens/ordererOrganizations/order1.omnicash-pay.com/orderers/order.order1.omnicash-pay.com/msp/tlscacerts/tlsca.order1.omnicash-pay.com-cert.pem
#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org2.omnicash-pay.com:
    url: grpcs://peer0.org2.omnicash-pay.com:7051
    eventUrl: grpcs://peer0.org2.omnicash-pay.com:7053
    grpcOptions:
      ssl-target-name-override: peer0.org2.omnicash-pay.com
      grpc.http2.keepalive_time: 15
    tlsCACerts:
      path: /root/daima/crypotogens/peerOrganizations/org2.omnicash-pay.com/tlsca/tlsca.org2.omnicash-pay.com-cert.pem
#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
